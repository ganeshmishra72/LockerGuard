package com.example.lockguard;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;

public class Decryptor extends JFrame implements ActionListener {

    JTextField filePathField;
    JButton browseButton, decryptButton, backbtn;
    JLabel statusLabel, lbl,lbl1,text,select;
    JPanel topPanel;
    JPasswordField password;
    File selectedFile;
    Container c;

    public Decryptor() {
        c = this.getContentPane();
        setBounds(500, 250, 500, 500);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLayout(null);

	text=new JLabel("DECRYPTION");
	text.setBounds(80,50,500,40);
	text.setForeground(Color.RED);
	text.setFont(new Font("Arial",Font.BOLD,50));
	
	select=new JLabel("Select The File");
	select.setBounds(20,150,500,25);
	select.setForeground(Color.RED);
	select.setFont(new Font("Arial",Font.BOLD,20));
	
        filePathField = new JTextField();
        filePathField.setEditable(false);
        filePathField.setBounds(20,200,300,30);
	filePathField.setForeground(Color.RED);
	 
	browseButton = new JButton("Browse File");
        browseButton.setBounds(330,200,120,30);
	browseButton.setForeground(Color.WHITE);
	browseButton.setFocusable(false);
	browseButton.setBackground(Color.RED);
	
	 lbl1=new JLabel("Enter Password:");
	 lbl1.setBounds(20,260,180,25);
	lbl1.setForeground(Color.RED);
	lbl1.setFont(new Font("Arial",Font.BOLD,20));;
	
        password=new JPasswordField();
        password.setBounds(210,260,300,25);
	password.setForeground(Color.RED);
	password.setFont(new Font("Arial",Font.BOLD,20));;

        statusLabel = new JLabel("Status: Waiting...");
	statusLabel.setBounds(20,330,500,40);
	statusLabel.setForeground(Color.RED);
	statusLabel.setFont(new Font("Arial",Font.BOLD,15));
       
        decryptButton = new JButton("Decrypt File");
        decryptButton.setBounds(50,400,120,30);
	decryptButton.setForeground(Color.WHITE);
	decryptButton.setFocusable(false);
	decryptButton.setBackground(Color.RED);
	
	backbtn = new JButton("Back");
        backbtn.setBounds(350,400,120,30);
	backbtn.setForeground(Color.WHITE);
	backbtn.setFocusable(false);
	backbtn.setBackground(Color.RED);
	
       
        

        
        
       
         
        add(lbl1);
        add(password);
       add(text);
       add(select);
       add(statusLabel);
       add(browseButton);
       add(filePathField);
        add(decryptButton);
        add(backbtn);
        
      

        browseButton.addActionListener(this);
        decryptButton.addActionListener(this);
        backbtn.addActionListener(this);
        
	
	c.setBackground(Color.BLACK);
        setVisible(true);
    }

	 
    @Override
    public void actionPerformed(ActionEvent e) {
      

        if (e.getSource() == browseButton) {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileHidingEnabled(false);
            int result = fileChooser.showOpenDialog(null);
            if (result == JFileChooser.APPROVE_OPTION) {
                selectedFile = fileChooser.getSelectedFile();
                filePathField.setText(selectedFile.getAbsolutePath());
                statusLabel.setText("File selected");
            }
        }
        
         if(e.getSource()==backbtn)
         {
          setVisible(false);
          new Operation();
         }
         
           if (e.getSource() == decryptButton) {
        if (password.getPassword().length < 8) {
            statusLabel.setText("Password must be at least 8 characters.");
            return;
        }

        try {
            File decryptedFile = Locker.decrypt(selectedFile, new String(password.getPassword()));
            statusLabel.setText("File Decryption Successfully.");
        } catch (Exception ex) {
            ex.printStackTrace();  // Log the exception
           statusLabel.setText("File Decryption Failed: " + ex.getClass().getSimpleName() + " - " + ex.getMessage());

        }
    }
    }

    public static void main(String[] args) {
        new Decryptor();
    }
}
